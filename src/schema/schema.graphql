#
# Common types
#
scalar JSON
scalar JSONObject

enum ORDER_DIR {
    ASC,
    DESC
}

"Metadata about a collection of entities"
type CollectionMeta {
    "number of returned results"
    count: Int!
    "total number of entities matching the query"
    total: Int!
}

#
# Input types
#

enum HOSTS_ORDER_BY {
    display_name,
    modified_on
}

"""
Defines criteria by which the hosts are filtered.

Some filters support wildcards.
Those that do can be used for exact matches (`fqdn: example.com`) or with wildcards (`fqdn: *.example.co?`)
"""
input HostFilter {
    AND: [HostFilter!]
    OR: [HostFilter!]
    NOT: HostFilter

    "Filter by host id. This filter supports wildcards"
    id: String,
    "Filter by insights id. This filter supports wildcards"
    insights_id: String,
    "Filter by display_name. This filter supports wildcards"
    display_name: String,
    "Filter by fqdn. This filter supports wildcards"
    fqdn: String,

    spf_arch: String,
    spf_os_release: String,
    spf_os_kernel_version: String,
    spf_infrastructure_type: String,
    spf_infrastructure_vendor: String
}

#
# Output types
#
type Host {
    id: ID!
    account: String!
    display_name: String
    created_on: String
    modified_on: String
    canonical_facts: HostCanonicalFacts,

    "EXPERIMENTAL - do not use!"
    system_profile_facts: JSONObject
}

type Hosts {
    data: [Host]!
    meta: CollectionMeta!
}

type HostCanonicalFacts {
    fqdn: String,
    insights_id: String,
    satellite_id: String
}

#
# Queries
#
type Query {

    "Fetches a list of hosts based on the given filtering, ordering and pagination criteria."
    hosts (
        filter: HostFilter,
        limit: Int = 10,
        offset: Int = 0,
        order_by: HOSTS_ORDER_BY = display_name,
        order_how: ORDER_DIR = ASC
    ): Hosts!
}
