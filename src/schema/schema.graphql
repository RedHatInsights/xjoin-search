#
# Common types
#
scalar JSON
scalar JSONObject

enum ORDER_DIR {
    ASC,
    DESC
}

"Metadata about a collection of entities"
type CollectionMeta {
    "number of returned results"
    count: Int!
    "total number of entities matching the query"
    total: Int!
}

#
# Input types
#

enum HOSTS_ORDER_BY {
    display_name,
    modified_on
}

enum HOST_TAGS_ORDER_BY {
    tag,
    count
}

"""
Defines criteria by which the hosts are filtered.
"""
input HostFilter {
    "Apply logical conjunction on the given filtering criteria"
    AND: [HostFilter!]
    "Apply logical disjunction on the given filtering criteria"
    OR: [HostFilter!]
    "Negate the given filtering criteria"
    NOT: HostFilter

    "Filter by host id"
    id: FilterStringWithWildcard,
    "Filter by insights id"
    insights_id: FilterStringWithWildcard,
    "Filter by display_name"
    display_name: FilterStringWithWildcardWithLowercase,
    "Filter by fqdn"
    fqdn: FilterStringWithWildcard,

    "Filter by 'arch' field of system profile"
    spf_arch: FilterStringWithWildcard,
    "Filter by 'os_release' field of system profile"
    spf_os_release: FilterStringWithWildcard,
    "Filter by 'os_kernel_version' field of system profile"
    spf_os_kernel_version: FilterStringWithWildcard,
    "Filter by 'infrastructure_type' field of system profile"
    spf_infrastructure_type: FilterStringWithWildcard,
    "Filter by 'infrastructure_vendor' field of system profile"
    spf_infrastructure_vendor: FilterStringWithWildcard,

    "Filter by the stale_timestamp value"
    stale_timestamp: FilterTimestamp

    "Filter by host tag. The tag namespace/key/value must match exactly what the host is tagged with"
    tag: FilterTag
}

"""
Basic filter for string fields that allows filtering based on exact match.
"""
input FilterString {
    """
    Compares the document field with the provided value.
    If `null` is provided then documents where the given field does not exist are returned.
    """
    eq: String
}

"""
String field filter that allows filtering based on exact match or using wildcards.
"""
input FilterStringWithWildcard {
    """
    Compares the document field with the provided value.
    If `null` is provided then documents where the given field does not exist are returned.
    """
    eq: String

    """
    Compares the document field with the provided value.
    Wildcards may be used in the query (e.g. `ki*y`).
    Two types of wildcard operators are supported:
    * `?`, which matches any single character
    * `*`, which can match zero or more characters, including an empty one

    See [Elasticsearch documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wildcard-query.html) for more details.
    """
    matches: String
}

"""
String field filter that allows filtering based on exact match or using wildcards.
In both cases the case of a letter can be ignored (case-insensitive matching) using the `_lc` suffixed operators.
"""
input FilterStringWithWildcardWithLowercase {
    """
    Compares the document field with the provided value.
    If `null` is provided then documents where the given field does not exist are returned.
    """
    eq: String

    """
    This operator is like [FilterStringWithWildcard.eq](#filterstring) except that it performs case-insensitive matching.
    Furthermore, unlike for `eq`, `null` is not an allowed value.
    """
    eq_lc: String

    """
    Compares the document field with the provided value.
    Wildcards may be used in the query (e.g. `ki*y`).
    Two types of wildcard operators are supported:
    * `?`, which matches any single character
    * `*`, which can match zero or more characters, including an empty one

    See [Elasticsearch documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wildcard-query.html) for more details.
    """
    matches: String

    """
    This operator is like [FilterStringWithWildcard.matches](#filterstringwithwildcard) except that it performs case-insensitive matching.
    """
    matches_lc: String
}

"""
String field filter that allows filtering based on exact match or using regular expression.
"""
input FilterStringWithRegex {
    """
    Compares the document field with the provided value.
    If `null` is provided then documents where the given field does not exist are returned.
    """
    eq: String

    """
    Matches the document field against the provided regular expression.
    """
    regex: String
}

"""
Timestamp field filter with support for common operations.
"""
input FilterTimestamp {
    "Less than"
    lt: String

    "Less than or equal to"
    lte: String

    "Greater than"
    gt: String

    "Greater than or equal to"
    gte: String
}

"""
Filters hosts by the presence of a host tag
"""
input FilterTag {
    "Tag namespace"
    namespace: FilterString,

    "Tag key"
    key: FilterString!,

    "Tag value"
    value: FilterString
}

"""
Defines the criteria by which tags are filtered in the `hostTags` query.
"""
input TagAggregationFilter {
    """
    Limits the aggregation to tags that match the given search term.
    The search term is a regular exression that operates on a string representation of a tag.
    The string representation has a form of "namespace/key=value" i.e. the segments are concatenated together using "=" and "/", respectively.
    There is no expecing of the control characters in the segments.
    As a result, "=" and "/" appear in every tag.
    ```
    """
    search: FilterStringWithRegex
}

#
# Output types
#

"Inventory host"
type Host {
    id: ID!
    account: String!
    display_name: String
    created_on: String
    modified_on: String
    stale_timestamp: String,
    reporter: String,
    ansible_host: String,

    "Canonical facts of a host. The subset of keys can be requested using `filter`."
    canonical_facts (filter: [String!]): JSONObject,

    "System profile of a host. The subset of keys can be requested using `filter`."
    system_profile_facts (filter: [String!]): JSONObject

    tags: Tags,

    "Facts of a host. The subset of keys can be requested using `filter`."
    facts (filter: [String!]): JSONObject
}

type Hosts {
    data: [Host]!
    meta: CollectionMeta!
}

"Structured representation of a tag"
type StructuredTag {
    namespace: String,
    key: String!,
    value: String
}

type Tags {
    data: [StructuredTag]!
    meta: CollectionMeta!
}

type TagInfo {
    tag: StructuredTag!
    count: Int!
}

type HostTags {
    data: [TagInfo]!
    meta: CollectionMeta!
}

#
# Queries
#
type Query {

    "Fetches a list of hosts based on the given filtering, ordering and pagination criteria."
    hosts (
        filter: HostFilter,
        limit: Int = 10,
        offset: Int = 0,
        order_by: HOSTS_ORDER_BY = display_name,
        order_how: ORDER_DIR = ASC
    ): Hosts!

    """
    Fetches a list of unique tags and the number of their occurenes in the given set of systems.

    By default the query operates on all known systems that are registered with the given account.
    This can be altered using the `hostFilter` parameter.

    The tags themselves can be filtered further using the `filter` parameter.
    """
    hostTags (
        hostFilter: HostFilter,
        filter: TagAggregationFilter,
        limit: Int = 10,
        offset: Int = 0,
        order_by: HOST_TAGS_ORDER_BY = count,
        order_how: ORDER_DIR = DESC
    ): HostTags
}
