#
# Common types
#
scalar JSON
scalar JSONObject

enum ORDER_DIR {
    ASC,
    DESC
}

"Metadata about a collection of entities"
type CollectionMeta {
    "number of returned results"
    count: Int!
    "total number of entities matching the query"
    total: Int!
}

#
# Input types
#

enum HOSTS_ORDER_BY {
    display_name,
    modified_on
}

enum HOST_TAGS_ORDER_BY {
    tag,
    count
}

"""
Defines criteria by which the hosts are filtered.

Some filters support wildcards.
Those that do can be used for exact matches (`fqdn: example.com`) or with wildcards (`fqdn: *.example.co?`)
"""
input HostFilter {
    AND: [HostFilter!]
    OR: [HostFilter!]
    NOT: HostFilter

    "Filter by host id. This filter supports wildcards"
    id: String,
    "Filter by insights id. This filter supports wildcards"
    insights_id: String,
    "Filter by display_name. This filter supports wildcards"
    display_name: String,
    "Filter by fqdn. This filter supports wildcards"
    fqdn: String,

    spf_arch: String,
    spf_os_release: String,
    spf_os_kernel_version: String,
    spf_infrastructure_type: String,
    spf_infrastructure_vendor: String,

    stale_timestamp: TimestampFilter

    "Filter by host tag. The tag namespace/key/value must match exactly what the host is tagged with"
    tag: TagFilter
}

"""
Defines criteria by which the timestamp fields are filtered.
"""
input TimestampFilter {
    lte: String
    gte: String
    lt: String
    gt: String
}

input TagFilter {
    namespace: String,
    key: String!,
    value: String
}

"""
Defines the criteria by which tags are filtered in the `hostTags` query.
"""
input TagAggregationFilter {
    """
    Defines a tag name filter.
    A tag name filter is a regular exression that operates on percent-encoded tag namespace, key and value at the same time.
    In order to match the query regular expression needs to match percent-encoded strings.

    For example, to match tags with `Δwithčhars!` suffix the tag name query should look like:
    ```
    {
        name: ".*%CE%94with%C4%8Dhars%21"
    }
    ```
    """
    name: String
}

#
# Output types
#
type Host {
    id: ID!
    account: String!
    display_name: String
    created_on: String
    modified_on: String
    stale_timestamp: String,
    reporter: String,
    ansible_host: String,

    "Canonical facts of a host. The subset of keys can be requested using `filter`."
    canonical_facts (filter: [String!]): JSONObject,

    "System profile of a host. The subset of keys can be requested using `filter`."
    system_profile_facts (filter: [String!]): JSONObject

    tags: Tags,

    "Facts of a host. The subset of keys can be requested using `filter`."
    facts (filter: [String!]): JSONObject
}

type Hosts {
    data: [Host]!
    meta: CollectionMeta!
}

"Structured representation of a tag"
type StructuredTag {
    namespace: String,
    key: String!,
    value: String
}

type Tags {
    data: [StructuredTag]!
    meta: CollectionMeta!
}

type TagInfo {
    tag: StructuredTag!
    count: Int!
}

type HostTags {
    data: [TagInfo]!
    meta: CollectionMeta!
}

#
# Queries
#
type Query {

    "Fetches a list of hosts based on the given filtering, ordering and pagination criteria."
    hosts (
        filter: HostFilter,
        limit: Int = 10,
        offset: Int = 0,
        order_by: HOSTS_ORDER_BY = display_name,
        order_how: ORDER_DIR = ASC
    ): Hosts!

    """
    Fetches a list of unique tags and the number of their occurenes in the given set of systems.

    By default the query operates on all known systems that are registered with the given account.
    This can be altered using the `hostFilter` parameter.

    The tags themselves can be filtered further using the `filter` parameter.
    """
    hostTags (
        hostFilter: HostFilter,
        filter: TagAggregationFilter,
        limit: Int = 10,
        offset: Int = 0,
        order_by: HOST_TAGS_ORDER_BY = count,
        order_how: ORDER_DIR = DESC
    ): HostTags
}
